# -*- coding: utf-8 -*-
"""BC-DL.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1q4A3uQLYtemOa93vAH3ocZWTeEHY5JeS
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import zipfile 
from PIL import Image,ImageOps

zip = zipfile.ZipFile('bee_imgs.zip')
zip.extractall()

df=pd.read_csv("bee_data.csv")
df=df.dropna(how='any')
df['species']=df['subspecies']
df=df.drop(columns=['date','time','zip code','location','caste','subspecies'])
df

df['species'].unique()

from sklearn.preprocessing import LabelEncoder
le=LabelEncoder()
le1=LabelEncoder()
df['health']=le.fit_transform(df['health'])
df['pollen_carrying']=le.fit_transform(df['pollen_carrying'])
df['species']=le1.fit_transform(df['species'])

df

import os
cur_path = os.getcwd()
print(cur_path)

path = os.path.join(cur_path,'bee_imgs/')
images = os.listdir(path)

print(images)

f=['.DS_Store']
for i in images:
  if i in f:
    images.remove(i)

len(images)

print(list(set(images)))

len(images)

data = []
labels = []

print(len(df))

for i in range(len(df)):
  #print(df['file'][i])
  if df['file'][i] in images:
    imag = Image.open(path+ '//'+ df['file'][i])
    imag=ImageOps.grayscale(imag)
    imag = imag.resize((64,64))
    imag = np.array(imag)
    data.append(imag)
    labels.append(df['species'][i])
  else:
    print("error no images")

print(labels)

len(labels)

print(data)

len(data)

#Converting lists into numpy arrays
data = np.array(data)
labels = np.array(labels)

print(data.shape, labels.shape)

import tensorflow as tf
from sklearn.model_selection import train_test_split

X_train, X_test, y_train, y_test = train_test_split(data, labels, test_size=0.25, random_state=42)

Img=64
#Converting the labels into one hot encoding
y_train = tf.keras.utils.to_categorical(y_train,7)
y_test = tf.keras.utils.to_categorical(y_test,7)
X_train=np.array(X_train).reshape(-1,Img,Img,1)
X_test=np.array(X_test).reshape(-1,Img,Img,1)

model = tf.keras.models.Sequential()
model.add(tf.keras.layers.Conv2D(filters=64, kernel_size=(5, 5), activation='relu', input_shape=X_train.shape[1:]))
model.add(tf.keras.layers.Conv2D(filters=64, kernel_size=(5, 5), activation='relu'))
model.add(tf.keras.layers.MaxPool2D(pool_size=(2, 2)))
model.add(tf.keras.layers.Dropout(rate=0.25))
model.add(tf.keras.layers.Conv2D(filters=128, kernel_size=(3, 3), activation='relu'))
model.add(tf.keras.layers.Conv2D(filters=128, kernel_size=(3, 3), activation='relu'))
model.add(tf.keras.layers.MaxPool2D(pool_size=(2, 2)))
model.add(tf.keras.layers.Dropout(rate=0.25))
model.add(tf.keras.layers.Flatten())
model.add(tf.keras.layers.Dense(512, activation='relu'))
model.add(tf.keras.layers.Dropout(rate=0.5))
model.add(tf.keras.layers.Dense(7, activation='softmax'))
print("Initialized model")

model.compile(loss='categorical_crossentropy', optimizer='adam', metrics=['accuracy'])

history = model.fit(X_train, y_train, batch_size=120, epochs=12, validation_data=(X_test, y_test))
model.save("bees.h5")

plt.figure(0)
plt.plot(history.history['accuracy'], label='training accuracy')
plt.plot(history.history['val_accuracy'], label='val accuracy')
plt.title('Accuracy')
plt.xlabel('epochs')
plt.ylabel('accuracy')
plt.legend()
plt.savefig('Accuracy.png')

plt.figure(1)
plt.plot(history.history['loss'], label='training loss')
plt.plot(history.history['val_loss'], label='val loss')
plt.title('Loss')
plt.xlabel('epochs')
plt.ylabel('loss')
plt.legend()
plt.savefig('Loss.png')
print("Saved Model & Graph to disk")

model = tf.keras.models.load_model('bees.h5')
print("Loaded model from disk")

res = model.predict(X_test)
res=np.round(res)
np.set_printoptions(precision=2)
print(res)

from sklearn.metrics import accuracy_score
print("Accuracy Score for the algorithm=>{}%".format(round(accuracy_score(y_test,res)*100),2))